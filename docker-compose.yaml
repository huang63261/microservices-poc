version: '3.8'
services:
    # Product Service
    product:
        build:
            context: ./apps/ms-product
            dockerfile: Dockerfile
        restart: unless-stopped
        volumes:
            - ./apps/ms-product:/var/www/html
        tty: true
        depends_on:
            - mysql
        networks:
            - app

    # Photo Service
    photo:
        build:
            context: ./apps/ms-photo
            dockerfile: Dockerfile
        restart: unless-stopped
        volumes:
            - ./apps/ms-photo:/var/www/html
        tty: true
        depends_on:
            - mysql
        networks:
            - app

    # Inventory Service
    inventory:
        build:
            context: ./apps/ms-inventory
            dockerfile: Dockerfile
        restart: unless-stopped
        volumes:
            - ./apps/ms-inventory:/var/www/html
        tty: true
        depends_on:
            - mysql
        networks:
            - app

    # Review Service
    review:
        build:
            context: ./apps/ms-review
            dockerfile: Dockerfile
        restart: unless-stopped
        volumes:
            - ./apps/ms-review:/var/www/html
        tty: true
        depends_on:
            - mysql
        networks:
            - app

    # Order Service
    order:
        build:
            context: ./apps/ms-order
            dockerfile: Dockerfile
        restart: unless-stopped
        volumes:
            - ./apps/ms-order:/var/www/html
        tty: true
        depends_on:
            - mysql
        networks:
            - app

    # Payment Service
    payment:
        build:
            context: ./apps/ms-payment
            dockerfile: Dockerfile
        restart: unless-stopped
        volumes:
            - ./apps/ms-payment:/var/www/html
        tty: true
        depends_on:
            - mysql
        networks:
            - app

    # Notification Service
    notification:
        build:
            context: ./apps/ms-notification
            dockerfile: Dockerfile
        restart: unless-stopped
        volumes:
            - ./apps/ms-notification:/var/www/html
        tty: true
        depends_on:
            - mysql
        networks:
            - app

    # Backend for Frontend
    bff:
        build:
            context: ./apps/backend-for-frontend
            dockerfile: Dockerfile
        restart: unless-stopped
        volumes:
            - ./apps/backend-for-frontend:/var/www/html
        tty: true
        depends_on:
            - mysql
        networks:
            - app

    # Orchestrator (SAGA Pattern)
    orchestrator:
        build:
            context: ./apps/orchestrator
            dockerfile: Dockerfile
        restart: unless-stopped
        volumes:
            - ./apps/orchestrator:/var/www/html
        tty: true
        depends_on:
            - mysql
        networks:
            - app

    nginx:
        image: nginx:alpine
        restart: unless-stopped
        tty: true
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./docker/nginx/sites/:/etc/nginx/conf.d/
        depends_on:
            - product
            - photo
            - inventory
            - review
            - order
            - payment
            - notification
            - bff
            - orchestrator
        networks:
            - app

    phpmyadmin:
        image: 'phpmyadmin/phpmyadmin'
        ports:
        - "${PMA_PORT}:80"
        environment:
            PMA_ARBITRARY: ${PMA_ARBITRARY}
            PMA_HOST: ${PMA_HOST}
            MYSQL_ROOT_PASSWORD: ${PMA_ROOT_PASSWORD}
        depends_on:
            - mysql
        networks:
            - app

    mysql:
        image: 'mysql:8-oracle'
        restart: unless-stopped
        command:
            - --character-set-server=utf8mb4
            - --collation-server=utf8mb4_unicode_ci
        volumes:
            - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d:ro
            - mysql-data:/var/lib/mysql
        environment:
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        networks:
            - app

    mailpit:
        image: 'axllent/mailpit'
        restart: unless-stopped
        volumes:
            - ./docker/mailpit:/data
        ports:
            - "${MAILPIT_HTTP_PORT:-8025}:8025"
            - "${MAILPIT_SMTP_PORT:-1025}:1025"
        networks:
            - app

    rabbitmq:
        image: "rabbitmq:3-management"
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - "rabbitmq_data:/var/lib/rabbitmq"
        environment:
            RABBITMQ_DEFAULT_USER: user
            RABBITMQ_DEFAULT_PASS: password
        networks:
            - app

    workspace:
        build:
            context: ./docker/workspace
            dockerfile: Dockerfile
        working_dir: ${WORKSPACE_WORKDIR}
        volumes:
            - ./apps/ms-product:${WORKSPACE_WORKDIR}/apps/ms-product
            - ./apps/ms-photo:${WORKSPACE_WORKDIR}/apps/ms-photo
            - ./apps/ms-inventory:${WORKSPACE_WORKDIR}/apps/ms-inventory
            - ./apps/ms-review:${WORKSPACE_WORKDIR}/apps/ms-review
            - ./apps/ms-order:${WORKSPACE_WORKDIR}/apps/ms-order
            - ./apps/ms-payment:${WORKSPACE_WORKDIR}/apps/ms-payment
            - ./apps/ms-notification:${WORKSPACE_WORKDIR}/apps/ms-notification
            - ./apps/backend-for-frontend:${WORKSPACE_WORKDIR}/apps/backend-for-frontend
            - ./apps/orchestrator:${WORKSPACE_WORKDIR}/apps/orchestrator
            - ./setup-services.sh:${WORKSPACE_WORKDIR}/setup-services.sh
        command: bash
        networks:
            - app


networks:
    app:
        driver: bridge
volumes:
    mysql-data: null
    rabbitmq_data: null